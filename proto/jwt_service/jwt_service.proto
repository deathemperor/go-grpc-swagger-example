syntax="proto3";

import "protoc-gen-swagger/options/annotations.proto";
import "google/api/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
		title: "The title of Authentication service";
		version: "1.1.0";
		contact: {
			name: "Authentication project";
			url: "https://tech.dzones.vn/api/authentication";
			email: "loc.truong.huu@dzones.vn";
		};
    };
    // Overwriting host entry breaks tests, so this is not done here.
	external_docs: {
		url: "https://docs.dzones.vn/authentication";
		description: "More about Authentication";
	}
	schemes: HTTP;
	schemes: HTTPS;
	schemes: WSS;
	consumes: "application/json";
	consumes: "application/x-foo-mime";
	produces: "application/json";
	produces: "application/x-foo-mime";
	security_definitions: {
		security: {
			key: "BasicAuth";
			value: {
				type: TYPE_BASIC;
			}
		}
		security: {
			key: "ApiKeyAuth";
			value: {
				type: TYPE_API_KEY;
				in: IN_HEADER;
				name: "X-API-Key";
			}
		}
		security: {
			key: "OAuth2";
			value: {
				type: TYPE_OAUTH2;
				flow: FLOW_ACCESS_CODE;
				authorization_url: "https://example.com/oauth/authorize";
				token_url: "https://example.com/oauth/token";
				scopes: {
					scope: {
						key: "read";
						value: "Grants read access";
					}
					scope: {
						key: "write";
						value: "Grants write access";
					}
					scope: {
						key: "admin";
						value: "Grants read and write access to administrative information";
					}
				}
			}
		}
	}
	security: {
		security_requirement: {
			key: "BasicAuth";
			value: {};
		}
		security_requirement: {
			key: "ApiKeyAuth";
			value: {};
		}
	}
	security: {
		security_requirement: {
			key: "OAuth2";
			value: {
				scope: "read";
				scope: "write";
			}
		}
		security_requirement: {
			key: "ApiKeyAuth";
			value: {};
		}
	}
	responses: {
		key: "403";
		value: {
			description: "Returned when the user does not have permission to access the resource.";
		}
	}
	responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
	responses: {
		key: "418";
		value: {
			description: "I'm a teapot.";
			schema: {
				json_schema: {
					ref: ".grpc.gateway.examples.examplepb.NumericEnum";
				}
			}
		}
	}
};

// Service Name is JWT
//
// Service Description is one line under service name
//
package jwt_service;

// document for service
// this is a service to verify JWT
service JWTService {
	// document for verify method
    rpc Verify(Request) returns (Response) {
        option (google.api.http) = {
            post: "/v1/jwt/verify"
            body: "*"
        };
	}
	// document
    rpc Echo(Request) returns (Response) {
        option (google.api.http) = {
            get: "/v1/jwt/echo/{token}"
        };
    }
}

// Annoucement object
message Announcement {
	// title of the announcement
    string title = 1;
}

// Request body
message Request {
    // the jwt token
    string token = 1;
}

// Response object
message Response {
    // status of response
	string status = 1;
	// the requested token
	string token = 2;
}